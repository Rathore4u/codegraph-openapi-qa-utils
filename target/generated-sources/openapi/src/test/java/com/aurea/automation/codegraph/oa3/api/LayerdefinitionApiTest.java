/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aurea.automation.codegraph.oa3.api;

import com.aurea.automation.codegraph.oa3.models.Attribute;
import com.aurea.automation.codegraph.oa3.models.ErrorResponse;
import java.io.File;
import com.aurea.automation.codegraph.oa3.models.LayerDefinitionCollectionResponse;
import com.aurea.automation.codegraph.oa3.models.LayerDefinitionResponse;
import com.aurea.automation.codegraph.oa3.models.PatchOperationString;
import com.aurea.automation.codegraph.oa3.models.ResponseEntity;
import com.aurea.automation.codegraph.oa3.ApiClient;
import com.aurea.automation.codegraph.oa3.api.LayerdefinitionApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static com.aurea.automation.codegraph.oa3.GsonObjectMapper.gson;

/**
 * API tests for LayerdefinitionApi
 */
@Ignore
public class LayerdefinitionApiTest {

    private LayerdefinitionApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("http://localhost"))).layerdefinition();
    }

    /**
     * OK
     */
    @Test
    public void shouldSee200AfterCreateLayerDefinitionUsingPOST() {
        Attribute attribute = null;
        api.createLayerDefinitionUsingPOST()
                .body(attribute).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * The provided body input is not a valid YAML object
     */
    @Test
    public void shouldSee400AfterCreateLayerDefinitionUsingPOST() {
        Attribute attribute = null;
        api.createLayerDefinitionUsingPOST()
                .body(attribute).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not authenticated
     */
    @Test
    public void shouldSee401AfterCreateLayerDefinitionUsingPOST() {
        Attribute attribute = null;
        api.createLayerDefinitionUsingPOST()
                .body(attribute).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * OK
     */
    @Test
    public void shouldSee200AfterDeleteLayerDefinitionDetail() {
        String idOrName = null;
        api.deleteLayerDefinitionDetail()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A LayerDefinitionVersion
     */
    @Test
    public void shouldSee204AfterDeleteLayerDefinitionDetail() {
        String idOrName = null;
        api.deleteLayerDefinitionDetail()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not authenticated
     */
    @Test
    public void shouldSee401AfterDeleteLayerDefinitionDetail() {
        String idOrName = null;
        api.deleteLayerDefinitionDetail()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A Layer Definition with the specified id does not exist
     */
    @Test
    public void shouldSee404AfterDeleteLayerDefinitionDetail() {
        String idOrName = null;
        api.deleteLayerDefinitionDetail()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * A LayerDefinitionVersion
     */
    @Test
    public void shouldSee200AfterGetLayerDefinitionDetails1() {
        String idOrName = null;
        String version = null;
        api.getLayerDefinitionDetails1()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not authenticated
     */
    @Test
    public void shouldSee401AfterGetLayerDefinitionDetails1() {
        String idOrName = null;
        String version = null;
        api.getLayerDefinitionDetails1()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A Layer Definition with the specified id does not exist
     */
    @Test
    public void shouldSee404AfterGetLayerDefinitionDetails1() {
        String idOrName = null;
        String version = null;
        api.getLayerDefinitionDetails1()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * A LayerDefinitionVersion
     */
    @Test
    public void shouldSee200AfterGetLayerDefinitionVersions() {
        String idOrName = null;
        Integer limit = null;
        Integer offset = null;
        api.getLayerDefinitionVersions()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not authenticated
     */
    @Test
    public void shouldSee401AfterGetLayerDefinitionVersions() {
        String idOrName = null;
        Integer limit = null;
        Integer offset = null;
        api.getLayerDefinitionVersions()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * A Layer Definition with the specified id does not exist
     */
    @Test
    public void shouldSee404AfterGetLayerDefinitionVersions() {
        String idOrName = null;
        Integer limit = null;
        Integer offset = null;
        api.getLayerDefinitionVersions()
                .idOrNamePath(idOrName).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * LayerDefinitionVersion Collection
     */
    @Test
    public void shouldSee200AfterListAllLayerDefinitions() {
        Boolean active = null;
        Integer limit = null;
        Integer offset = null;
        api.listAllLayerDefinitions().execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * Layer Definition updated
     */
    @Test
    public void shouldSee200AfterUpdateLayerDefinitionDetails() {
        String idOrName = null;
        List<PatchOperationString> patchOperationString = null;
        api.updateLayerDefinitionDetails()
                .idOrNamePath(idOrName)
                .body(patchOperationString).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not authenticated
     */
    @Test
    public void shouldSee401AfterUpdateLayerDefinitionDetails() {
        String idOrName = null;
        List<PatchOperationString> patchOperationString = null;
        api.updateLayerDefinitionDetails()
                .idOrNamePath(idOrName)
                .body(patchOperationString).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Layer Definition not found
     */
    @Test
    public void shouldSee404AfterUpdateLayerDefinitionDetails() {
        String idOrName = null;
        List<PatchOperationString> patchOperationString = null;
        api.updateLayerDefinitionDetails()
                .idOrNamePath(idOrName)
                .body(patchOperationString).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Invalid or missing parameters
     */
    @Test
    public void shouldSee422AfterUpdateLayerDefinitionDetails() {
        String idOrName = null;
        List<PatchOperationString> patchOperationString = null;
        api.updateLayerDefinitionDetails()
                .idOrNamePath(idOrName)
                .body(patchOperationString).execute(r -> r.prettyPeek());
        // TODO: test validations
    }


    /**
     * OK
     */
    @Test
    public void shouldSee200AfterUploadJarToS3UsingPOST() {
        File files = null;
        api.uploadJarToS3UsingPOST()
                .filesMultiPart(files).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * User not authenticated
     */
    @Test
    public void shouldSee401AfterUploadJarToS3UsingPOST() {
        File files = null;
        api.uploadJarToS3UsingPOST()
                .filesMultiPart(files).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

    /**
     * Valid JAR file must be provided
     */
    @Test
    public void shouldSee422AfterUploadJarToS3UsingPOST() {
        File files = null;
        api.uploadJarToS3UsingPOST()
                .filesMultiPart(files).execute(r -> r.prettyPeek());
        // TODO: test validations
    }

}