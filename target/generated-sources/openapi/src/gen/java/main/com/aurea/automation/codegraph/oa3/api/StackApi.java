/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aurea.automation.codegraph.oa3.api;

import com.google.gson.reflect.TypeToken;
import com.aurea.automation.codegraph.oa3.models.Attribute;
import com.aurea.automation.codegraph.oa3.models.ErrorResponse;
import com.aurea.automation.codegraph.oa3.models.PatchOperationString;
import com.aurea.automation.codegraph.oa3.models.StackVersion;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.aurea.automation.codegraph.oa3.JSON;
import com.aurea.automation.codegraph.oa3.Oper;
import com.aurea.automation.codegraph.oa3.models.*;

import static io.restassured.http.Method.*;

@Api(value = "Stack")
public class StackApi {

    private RequestSpecBuilder reqSpec;

    private StackApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static StackApi stack(RequestSpecBuilder reqSpec) {
        return new StackApi(reqSpec);
    }


    @ApiOperation(value = "Add a Stack Definition",
            notes = "This method validates and adds a Stack Definition",
            nickname = "createStackUsingPOST",
            tags = { "stack" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 422, message = "The Stack definition provided is not a valid YAML")  })
    public CreateStackUsingPOSTOper createStackUsingPOST() {
        return new CreateStackUsingPOSTOper(reqSpec);
    }

    @ApiOperation(value = "Deactivate a Stack",
            notes = "Deactivate the Stack with the specified id",
            nickname = "deactivateStackUsingDELETE",
            tags = { "stack" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 204, message = "successful operation") ,
            @ApiResponse(code = 401, message = "Unauthorized") ,
            @ApiResponse(code = 404, message = "Stack not found")  })
    public DeactivateStackUsingDELETEOper deactivateStackUsingDELETE() {
        return new DeactivateStackUsingDELETEOper(reqSpec);
    }

    @ApiOperation(value = "Retrieve a Stack",
            notes = "TRetrieve a Stack with the specified id",
            nickname = "getStackDetailsUsingGET",
            tags = { "stack" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A StackVersion") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "Stack not found")  })
    public GetStackDetailsUsingGETOper getStackDetailsUsingGET() {
        return new GetStackDetailsUsingGETOper(reqSpec);
    }

    @ApiOperation(value = "Get all Stack Versions",
            notes = "This endpoint allows clients to retrieve versions for the Stack with specified id",
            nickname = "getStackVersions",
            tags = { "stack" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A StackVersion") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "A Stack with the specified id does not exist")  })
    public GetStackVersionsOper getStackVersions() {
        return new GetStackVersionsOper(reqSpec);
    }

    @ApiOperation(value = "Retrieves a list of Stacks",
            notes = "Retrieves a list of Stacks",
            nickname = "listAllStacksUsingGET",
            tags = { "stack" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "successful operation")  })
    public ListAllStacksUsingGETOper listAllStacksUsingGET() {
        return new ListAllStacksUsingGETOper(reqSpec);
    }

    @ApiOperation(value = "Update a Stack",
            notes = "Update the name, description, or definition of a Stack",
            nickname = "updateStackUsingPATCH",
            tags = { "stack" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Stack updated") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "Stack not found") ,
            @ApiResponse(code = 422, message = "Invalid or missing parameters")  })
    public UpdateStackUsingPATCHOper updateStackUsingPATCH() {
        return new UpdateStackUsingPATCHOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public StackApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Add a Stack Definition
     * This method validates and adds a Stack Definition
     *
     * @see #body stackDto (required)
     * return StackVersion
     */
    public static class CreateStackUsingPOSTOper implements Oper<CreateStackUsingPOSTOper> {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/stacks";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateStackUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /stacks
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /stacks
         * @param handler handler
         * @return StackVersion
         */
        public StackVersion executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackVersion>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param attribute (Attribute) stackDto (required)
         * @return operation
         */
        public CreateStackUsingPOSTOper body(Attribute attribute) {
            reqSpec.setBody(attribute);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public CreateStackUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public CreateStackUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Deactivate a Stack
     * Deactivate the Stack with the specified id
     *
     * @see #idPath id (required)
     * return List&lt;Object&gt;
     */
    public static class DeactivateStackUsingDELETEOper implements Oper<DeactivateStackUsingDELETEOper> {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/stacks/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeactivateStackUsingDELETEOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /stacks/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /stacks/{id}
         * @param handler handler
         * @return List&lt;Object&gt;
         */
        public List<Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Object>>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) id (required)
         * @return operation
         */
        public DeactivateStackUsingDELETEOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public DeactivateStackUsingDELETEOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public DeactivateStackUsingDELETEOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Retrieve a Stack
     * TRetrieve a Stack with the specified id
     *
     * @see #idPath id of the stack to retrieve (required)
     * @see #versionQuery version id to retrieve (optional)
     * return StackVersion
     */
    public static class GetStackDetailsUsingGETOper implements Oper<GetStackDetailsUsingGETOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/stacks/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetStackDetailsUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /stacks/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /stacks/{id}
         * @param handler handler
         * @return StackVersion
         */
        public StackVersion executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackVersion>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) id of the stack to retrieve (required)
         * @return operation
         */
        public GetStackDetailsUsingGETOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        public static final String VERSION_QUERY = "version";

        /**
         * @param version (Integer) version id to retrieve (optional)
         * @return operation
         */
        public GetStackDetailsUsingGETOper versionQuery(Object... version) {
            reqSpec.addQueryParam(VERSION_QUERY, version);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackDetailsUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackDetailsUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all Stack Versions
     * This endpoint allows clients to retrieve versions for the Stack with specified id
     *
     * @see #idPath Stack ID (required)
     * @see #limitQuery limit (optional, default to 100)
     * @see #offsetQuery offset (optional, default to 0)
     * return StackVersion
     */
    public static class GetStackVersionsOper implements Oper<GetStackVersionsOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/stacks/{id}/versions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetStackVersionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /stacks/{id}/versions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /stacks/{id}/versions
         * @param handler handler
         * @return StackVersion
         */
        public StackVersion executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackVersion>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) Stack ID (required)
         * @return operation
         */
        public GetStackVersionsOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) limit (optional, default to 100)
         * @return operation
         */
        public GetStackVersionsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional, default to 0)
         * @return operation
         */
        public GetStackVersionsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackVersionsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackVersionsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Retrieves a list of Stacks
     * Retrieves a list of Stacks
     *
     * @see #activeQuery active (optional, default to true)
     * @see #limitQuery limit (optional, default to 100)
     * @see #offsetQuery offset (optional, default to 0)
     * return List&lt;Object&gt;
     */
    public static class ListAllStacksUsingGETOper implements Oper<ListAllStacksUsingGETOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/stacks";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ListAllStacksUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /stacks
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /stacks
         * @param handler handler
         * @return List&lt;Object&gt;
         */
        public List<Object> executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<List<Object>>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ACTIVE_QUERY = "active";

        /**
         * @param active (Boolean) active (optional, default to true)
         * @return operation
         */
        public ListAllStacksUsingGETOper activeQuery(Object... active) {
            reqSpec.addQueryParam(ACTIVE_QUERY, active);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) limit (optional, default to 100)
         * @return operation
         */
        public ListAllStacksUsingGETOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional, default to 0)
         * @return operation
         */
        public ListAllStacksUsingGETOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public ListAllStacksUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public ListAllStacksUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a Stack
     * Update the name, description, or definition of a Stack
     *
     * @see #idPath id of the Stack (required)
     * @see #body patchRequests (required)
     * return StackVersion
     */
    public static class UpdateStackUsingPATCHOper implements Oper<UpdateStackUsingPATCHOper> {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/stacks/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateStackUsingPATCHOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /stacks/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /stacks/{id}
         * @param handler handler
         * @return StackVersion
         */
        public StackVersion executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackVersion>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param patchOperationString (List&lt;PatchOperationString&gt;) patchRequests (required)
         * @return operation
         */
        public UpdateStackUsingPATCHOper body(List<PatchOperationString> patchOperationString) {
            reqSpec.setBody(patchOperationString);
            return this;
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) id of the Stack (required)
         * @return operation
         */
        public UpdateStackUsingPATCHOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateStackUsingPATCHOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateStackUsingPATCHOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
