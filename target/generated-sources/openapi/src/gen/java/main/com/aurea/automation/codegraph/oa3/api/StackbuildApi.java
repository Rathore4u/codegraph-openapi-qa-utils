/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aurea.automation.codegraph.oa3.api;

import com.google.gson.reflect.TypeToken;
import com.aurea.automation.codegraph.oa3.models.ErrorResponse;
import com.aurea.automation.codegraph.oa3.models.StackBuildRequest;
import com.aurea.automation.codegraph.oa3.models.StackBuildRequestDto;
import com.aurea.automation.codegraph.oa3.models.StackBuildStatus;
import com.aurea.automation.codegraph.oa3.models.StackBuildStatusUpdateDto;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.aurea.automation.codegraph.oa3.JSON;
import com.aurea.automation.codegraph.oa3.Oper;
import com.aurea.automation.codegraph.oa3.models.*;

import static io.restassured.http.Method.*;

@Api(value = "Stackbuild")
public class StackbuildApi {

    private RequestSpecBuilder reqSpec;

    private StackbuildApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static StackbuildApi stackbuild(RequestSpecBuilder reqSpec) {
        return new StackbuildApi(reqSpec);
    }


    @ApiOperation(value = "Submits a stack build request",
            notes = "This method validates and adds a stack build request",
            nickname = "createStackBuildRequestUsingPOST",
            tags = { "stackbuild" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 201, message = "Stack Build Request is created") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 409, message = "Request already exists") ,
            @ApiResponse(code = 422, message = "Required fields should have values")  })
    public CreateStackBuildRequestUsingPOSTOper createStackBuildRequestUsingPOST() {
        return new CreateStackBuildRequestUsingPOSTOper(reqSpec);
    }

    @ApiOperation(value = "Get the stack build request data",
            notes = "This endpoint allows clients to retrieve the data of a stack build request with specified id",
            nickname = "getStackBuildStatus",
            tags = { "stackbuild" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A Stack build request") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "A Stack build request with specified id does not exist")  })
    public GetStackBuildStatusOper getStackBuildStatus() {
        return new GetStackBuildStatusOper(reqSpec);
    }

    @ApiOperation(value = "Get the status of a Stack build request",
            notes = "This endpoint allows clients to retrieve the status of a Stack build request with specified id",
            nickname = "getStackBuildStatus1",
            tags = { "stackbuild" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A StackBuildStatus") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "A Stack build request with specified id does not exist")  })
    public GetStackBuildStatus1Oper getStackBuildStatus1() {
        return new GetStackBuildStatus1Oper(reqSpec);
    }

    @ApiOperation(value = "Send stack and layer build updates",
            notes = "Send stack and layer build updates",
            nickname = "saveStackAndLayerUpdatesUsingPOST",
            tags = { "webhook", "stackbuild" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 201, message = "Stack Build Request is created") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 422, message = "Required fields should have values")  })
    public SaveStackAndLayerUpdatesUsingPOSTOper saveStackAndLayerUpdatesUsingPOST() {
        return new SaveStackAndLayerUpdatesUsingPOSTOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public StackbuildApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Submits a stack build request
     * This method validates and adds a stack build request
     *
     * @see #body requestDto (required)
     * return StackBuildRequest
     */
    public static class CreateStackBuildRequestUsingPOSTOper implements Oper<CreateStackBuildRequestUsingPOSTOper> {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/stackbuilds";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateStackBuildRequestUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /stackbuilds
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /stackbuilds
         * @param handler handler
         * @return StackBuildRequest
         */
        public StackBuildRequest executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackBuildRequest>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param stackBuildRequestDto (StackBuildRequestDto) requestDto (required)
         * @return operation
         */
        public CreateStackBuildRequestUsingPOSTOper body(StackBuildRequestDto stackBuildRequestDto) {
            reqSpec.setBody(stackBuildRequestDto);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public CreateStackBuildRequestUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public CreateStackBuildRequestUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get the stack build request data
     * This endpoint allows clients to retrieve the data of a stack build request with specified id
     *
     * @see #idPath Stack build request ID (required)
     * return StackBuildRequest
     */
    public static class GetStackBuildStatusOper implements Oper<GetStackBuildStatusOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/stackbuilds/{id}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetStackBuildStatusOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /stackbuilds/{id}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /stackbuilds/{id}
         * @param handler handler
         * @return StackBuildRequest
         */
        public StackBuildRequest executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackBuildRequest>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) Stack build request ID (required)
         * @return operation
         */
        public GetStackBuildStatusOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackBuildStatusOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackBuildStatusOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get the status of a Stack build request
     * This endpoint allows clients to retrieve the status of a Stack build request with specified id
     *
     * @see #idPath Stack build request ID (required)
     * return StackBuildStatus
     */
    public static class GetStackBuildStatus1Oper implements Oper<GetStackBuildStatus1Oper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/stackbuilds/{id}/status";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetStackBuildStatus1Oper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /stackbuilds/{id}/status
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /stackbuilds/{id}/status
         * @param handler handler
         * @return StackBuildStatus
         */
        public StackBuildStatus executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackBuildStatus>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) Stack build request ID (required)
         * @return operation
         */
        public GetStackBuildStatus1Oper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackBuildStatus1Oper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetStackBuildStatus1Oper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Send stack and layer build updates
     * Send stack and layer build updates
     *
     * @see #idPath id (required)
     * @see #body requestDto (required)
     * return StackBuildRequest
     */
    public static class SaveStackAndLayerUpdatesUsingPOSTOper implements Oper<SaveStackAndLayerUpdatesUsingPOSTOper> {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/stackbuilds/{id}/updates";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public SaveStackAndLayerUpdatesUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /stackbuilds/{id}/updates
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /stackbuilds/{id}/updates
         * @param handler handler
         * @return StackBuildRequest
         */
        public StackBuildRequest executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<StackBuildRequest>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param stackBuildStatusUpdateDto (StackBuildStatusUpdateDto) requestDto (required)
         * @return operation
         */
        public SaveStackAndLayerUpdatesUsingPOSTOper body(StackBuildStatusUpdateDto stackBuildStatusUpdateDto) {
            reqSpec.setBody(stackBuildStatusUpdateDto);
            return this;
        }

        public static final String ID_PATH = "id";

        /**
         * @param id (String) id (required)
         * @return operation
         */
        public SaveStackAndLayerUpdatesUsingPOSTOper idPath(Object id) {
            reqSpec.addPathParam(ID_PATH, id);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public SaveStackAndLayerUpdatesUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public SaveStackAndLayerUpdatesUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
