/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aurea.automation.codegraph.oa3.api;

import com.google.gson.reflect.TypeToken;
import com.aurea.automation.codegraph.oa3.models.ErrorResponse;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.aurea.automation.codegraph.oa3.JSON;
import com.aurea.automation.codegraph.oa3.Oper;
import com.aurea.automation.codegraph.oa3.models.*;

import static io.restassured.http.Method.*;

@Api(value = "TestAuth")
public class TestAuthApi {

    private RequestSpecBuilder reqSpec;

    private TestAuthApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static TestAuthApi testAuth(RequestSpecBuilder reqSpec) {
        return new TestAuthApi(reqSpec);
    }


    @ApiOperation(value = "Test Authentication",
            notes = "This method tests authentication",
            nickname = "getTestAuthUsingGET",
            tags = { "test-auth" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "bad request") ,
            @ApiResponse(code = 401, message = "User not authenticated")  })
    public GetTestAuthUsingGETOper getTestAuthUsingGET() {
        return new GetTestAuthUsingGETOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public TestAuthApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Test Authentication
     * This method tests authentication
     *
     * @see #nameQuery  (optional)
     * return String
     */
    public static class GetTestAuthUsingGETOper implements Oper<GetTestAuthUsingGETOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/test-auth";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetTestAuthUsingGETOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /test-auth
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /test-auth
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String NAME_QUERY = "name";

        /**
         * @param name (String)  (optional)
         * @return operation
         */
        public GetTestAuthUsingGETOper nameQuery(Object... name) {
            reqSpec.addQueryParam(NAME_QUERY, name);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetTestAuthUsingGETOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetTestAuthUsingGETOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
