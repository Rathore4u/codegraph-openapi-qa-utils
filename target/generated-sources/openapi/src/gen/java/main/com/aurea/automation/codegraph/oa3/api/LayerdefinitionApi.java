/*
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aurea.automation.codegraph.oa3.api;

import com.google.gson.reflect.TypeToken;
import com.aurea.automation.codegraph.oa3.models.Attribute;
import com.aurea.automation.codegraph.oa3.models.ErrorResponse;
import java.io.File;
import com.aurea.automation.codegraph.oa3.models.LayerDefinitionCollectionResponse;
import com.aurea.automation.codegraph.oa3.models.LayerDefinitionResponse;
import com.aurea.automation.codegraph.oa3.models.PatchOperationString;
import com.aurea.automation.codegraph.oa3.models.ResponseEntity;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.Method;
import io.restassured.response.Response;
import io.swagger.annotations.*;

import java.lang.reflect.Type;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;
import com.aurea.automation.codegraph.oa3.JSON;
import com.aurea.automation.codegraph.oa3.Oper;
import com.aurea.automation.codegraph.oa3.models.*;

import static io.restassured.http.Method.*;

@Api(value = "Layerdefinition")
public class LayerdefinitionApi {

    private RequestSpecBuilder reqSpec;

    private LayerdefinitionApi(RequestSpecBuilder reqSpec) {
        this.reqSpec = reqSpec;
    }

    public static LayerdefinitionApi layerdefinition(RequestSpecBuilder reqSpec) {
        return new LayerdefinitionApi(reqSpec);
    }


    @ApiOperation(value = "Add a Layer Definition",
            notes = "This method validates and adds a Layer Definition",
            nickname = "createLayerDefinitionUsingPOST",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 400, message = "The provided body input is not a valid YAML object") ,
            @ApiResponse(code = 401, message = "User not authenticated")  })
    public CreateLayerDefinitionUsingPOSTOper createLayerDefinitionUsingPOST() {
        return new CreateLayerDefinitionUsingPOSTOper(reqSpec);
    }

    @ApiOperation(value = "Delete a Layer Definition Detail",
            notes = "This endpoint allows clients to delete the Layer Definition with the specified id",
            nickname = "deleteLayerDefinitionDetail",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 204, message = "A LayerDefinitionVersion") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "A Layer Definition with the specified id does not exist")  })
    public DeleteLayerDefinitionDetailOper deleteLayerDefinitionDetail() {
        return new DeleteLayerDefinitionDetailOper(reqSpec);
    }

    @ApiOperation(value = "Get a Layer Definition Details",
            notes = "This endpoint allows clients to retrieve details for the Layer Definition with the specified id",
            nickname = "getLayerDefinitionDetails1",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A LayerDefinitionVersion") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "A Layer Definition with the specified id does not exist")  })
    public GetLayerDefinitionDetails1Oper getLayerDefinitionDetails1() {
        return new GetLayerDefinitionDetails1Oper(reqSpec);
    }

    @ApiOperation(value = "Get all Layer Definition Versions",
            notes = "This endpoint allows clients to retrieve versions for the Layer Definition with the specified id",
            nickname = "getLayerDefinitionVersions",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "A LayerDefinitionVersion") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "A Layer Definition with the specified id does not exist")  })
    public GetLayerDefinitionVersionsOper getLayerDefinitionVersions() {
        return new GetLayerDefinitionVersionsOper(reqSpec);
    }

    @ApiOperation(value = "List all Layer Definitions",
            notes = "This endpoint allows clients to retrieve all Layer Definition optionally indicating to get inactive ones and specifying offset and limits",
            nickname = "listAllLayerDefinitions",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "LayerDefinitionVersion Collection")  })
    public ListAllLayerDefinitionsOper listAllLayerDefinitions() {
        return new ListAllLayerDefinitionsOper(reqSpec);
    }

    @ApiOperation(value = "Update a Layer Definition",
            notes = "Update the name, description, or definition of a Layer Definition",
            nickname = "updateLayerDefinitionDetails",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "Layer Definition updated") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 404, message = "Layer Definition not found") ,
            @ApiResponse(code = 422, message = "Invalid or missing parameters")  })
    public UpdateLayerDefinitionDetailsOper updateLayerDefinitionDetails() {
        return new UpdateLayerDefinitionDetailsOper(reqSpec);
    }

    @ApiOperation(value = "Upload jars to s3",
            notes = "This method receives jars and uploads them to s3",
            nickname = "uploadJarToS3UsingPOST",
            tags = { "layerdefinition" })
    @ApiResponses(value = { 
            @ApiResponse(code = 200, message = "OK") ,
            @ApiResponse(code = 401, message = "User not authenticated") ,
            @ApiResponse(code = 422, message = "Valid JAR file must be provided")  })
    public UploadJarToS3UsingPOSTOper uploadJarToS3UsingPOST() {
        return new UploadJarToS3UsingPOSTOper(reqSpec);
    }

    /**
     * Customise request specification
     * @param consumer consumer
     * @return api
     */
    public LayerdefinitionApi reqSpec(Consumer<RequestSpecBuilder> consumer) {
        consumer.accept(reqSpec);
        return this;
    }

    /**
     * Add a Layer Definition
     * This method validates and adds a Layer Definition
     *
     * @see #body layerDefinitionDto (required)
     * return LayerDefinitionResponse
     */
    public static class CreateLayerDefinitionUsingPOSTOper implements Oper<CreateLayerDefinitionUsingPOSTOper> {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/layerdefinitions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public CreateLayerDefinitionUsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /layerdefinitions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /layerdefinitions
         * @param handler handler
         * @return LayerDefinitionResponse
         */
        public LayerDefinitionResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<LayerDefinitionResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param attribute (Attribute) layerDefinitionDto (required)
         * @return operation
         */
        public CreateLayerDefinitionUsingPOSTOper body(Attribute attribute) {
            reqSpec.setBody(attribute);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public CreateLayerDefinitionUsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public CreateLayerDefinitionUsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Delete a Layer Definition Detail
     * This endpoint allows clients to delete the Layer Definition with the specified id
     *
     * @see #idOrNamePath Layer Definition ID (required)
     * return ResponseEntity
     */
    public static class DeleteLayerDefinitionDetailOper implements Oper<DeleteLayerDefinitionDetailOper> {

        public static final Method REQ_METHOD = DELETE;
        public static final String REQ_URI = "/layerdefinitions/{idOrName}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public DeleteLayerDefinitionDetailOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * DELETE /layerdefinitions/{idOrName}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * DELETE /layerdefinitions/{idOrName}
         * @param handler handler
         * @return ResponseEntity
         */
        public ResponseEntity executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<ResponseEntity>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_OR_NAME_PATH = "idOrName";

        /**
         * @param idOrName (String) Layer Definition ID (required)
         * @return operation
         */
        public DeleteLayerDefinitionDetailOper idOrNamePath(Object idOrName) {
            reqSpec.addPathParam(ID_OR_NAME_PATH, idOrName);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public DeleteLayerDefinitionDetailOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public DeleteLayerDefinitionDetailOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get a Layer Definition Details
     * This endpoint allows clients to retrieve details for the Layer Definition with the specified id
     *
     * @see #idOrNamePath Layer Definition ID (required)
     * @see #versionQuery version id to retrieve (optional)
     * return LayerDefinitionResponse
     */
    public static class GetLayerDefinitionDetails1Oper implements Oper<GetLayerDefinitionDetails1Oper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/layerdefinitions/{idOrName}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetLayerDefinitionDetails1Oper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /layerdefinitions/{idOrName}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /layerdefinitions/{idOrName}
         * @param handler handler
         * @return LayerDefinitionResponse
         */
        public LayerDefinitionResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<LayerDefinitionResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_OR_NAME_PATH = "idOrName";

        /**
         * @param idOrName (String) Layer Definition ID (required)
         * @return operation
         */
        public GetLayerDefinitionDetails1Oper idOrNamePath(Object idOrName) {
            reqSpec.addPathParam(ID_OR_NAME_PATH, idOrName);
            return this;
        }

        public static final String VERSION_QUERY = "version";

        /**
         * @param version (String) version id to retrieve (optional)
         * @return operation
         */
        public GetLayerDefinitionDetails1Oper versionQuery(Object... version) {
            reqSpec.addQueryParam(VERSION_QUERY, version);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetLayerDefinitionDetails1Oper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetLayerDefinitionDetails1Oper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Get all Layer Definition Versions
     * This endpoint allows clients to retrieve versions for the Layer Definition with the specified id
     *
     * @see #idOrNamePath Layer Definition ID (required)
     * @see #limitQuery limit (optional, default to 100)
     * @see #offsetQuery offset (optional, default to 0)
     * return LayerDefinitionCollectionResponse
     */
    public static class GetLayerDefinitionVersionsOper implements Oper<GetLayerDefinitionVersionsOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/layerdefinitions/{idOrName}/versions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public GetLayerDefinitionVersionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /layerdefinitions/{idOrName}/versions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /layerdefinitions/{idOrName}/versions
         * @param handler handler
         * @return LayerDefinitionCollectionResponse
         */
        public LayerDefinitionCollectionResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<LayerDefinitionCollectionResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ID_OR_NAME_PATH = "idOrName";

        /**
         * @param idOrName (String) Layer Definition ID (required)
         * @return operation
         */
        public GetLayerDefinitionVersionsOper idOrNamePath(Object idOrName) {
            reqSpec.addPathParam(ID_OR_NAME_PATH, idOrName);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) limit (optional, default to 100)
         * @return operation
         */
        public GetLayerDefinitionVersionsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional, default to 0)
         * @return operation
         */
        public GetLayerDefinitionVersionsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public GetLayerDefinitionVersionsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public GetLayerDefinitionVersionsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * List all Layer Definitions
     * This endpoint allows clients to retrieve all Layer Definition optionally indicating to get inactive ones and specifying offset and limits
     *
     * @see #activeQuery active (optional, default to true)
     * @see #limitQuery limit (optional, default to 100)
     * @see #offsetQuery offset (optional, default to 0)
     * return LayerDefinitionCollectionResponse
     */
    public static class ListAllLayerDefinitionsOper implements Oper<ListAllLayerDefinitionsOper> {

        public static final Method REQ_METHOD = GET;
        public static final String REQ_URI = "/layerdefinitions";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public ListAllLayerDefinitionsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * GET /layerdefinitions
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * GET /layerdefinitions
         * @param handler handler
         * @return LayerDefinitionCollectionResponse
         */
        public LayerDefinitionCollectionResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<LayerDefinitionCollectionResponse>(){}.getType();
            return execute(handler).as(type);
        }

        public static final String ACTIVE_QUERY = "active";

        /**
         * @param active (Boolean) active (optional, default to true)
         * @return operation
         */
        public ListAllLayerDefinitionsOper activeQuery(Object... active) {
            reqSpec.addQueryParam(ACTIVE_QUERY, active);
            return this;
        }

        public static final String LIMIT_QUERY = "limit";

        /**
         * @param limit (Integer) limit (optional, default to 100)
         * @return operation
         */
        public ListAllLayerDefinitionsOper limitQuery(Object... limit) {
            reqSpec.addQueryParam(LIMIT_QUERY, limit);
            return this;
        }

        public static final String OFFSET_QUERY = "offset";

        /**
         * @param offset (Integer) offset (optional, default to 0)
         * @return operation
         */
        public ListAllLayerDefinitionsOper offsetQuery(Object... offset) {
            reqSpec.addQueryParam(OFFSET_QUERY, offset);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public ListAllLayerDefinitionsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public ListAllLayerDefinitionsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Update a Layer Definition
     * Update the name, description, or definition of a Layer Definition
     *
     * @see #idOrNamePath id of the Layer Definition (required)
     * @see #body patchRequests (required)
     * return LayerDefinitionResponse
     */
    public static class UpdateLayerDefinitionDetailsOper implements Oper<UpdateLayerDefinitionDetailsOper> {

        public static final Method REQ_METHOD = PATCH;
        public static final String REQ_URI = "/layerdefinitions/{idOrName}";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UpdateLayerDefinitionDetailsOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("application/json");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * PATCH /layerdefinitions/{idOrName}
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * PATCH /layerdefinitions/{idOrName}
         * @param handler handler
         * @return LayerDefinitionResponse
         */
        public LayerDefinitionResponse executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<LayerDefinitionResponse>(){}.getType();
            return execute(handler).as(type);
        }

         /**
         * @param patchOperationString (List&lt;PatchOperationString&gt;) patchRequests (required)
         * @return operation
         */
        public UpdateLayerDefinitionDetailsOper body(List<PatchOperationString> patchOperationString) {
            reqSpec.setBody(patchOperationString);
            return this;
        }

        public static final String ID_OR_NAME_PATH = "idOrName";

        /**
         * @param idOrName (String) id of the Layer Definition (required)
         * @return operation
         */
        public UpdateLayerDefinitionDetailsOper idOrNamePath(Object idOrName) {
            reqSpec.addPathParam(ID_OR_NAME_PATH, idOrName);
            return this;
        }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateLayerDefinitionDetailsOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public UpdateLayerDefinitionDetailsOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
    /**
     * Upload jars to s3
     * This method receives jars and uploads them to s3
     *
     * @see #filesMultiPart  (required)
     * return String
     */
    public static class UploadJarToS3UsingPOSTOper implements Oper<UploadJarToS3UsingPOSTOper> {

        public static final Method REQ_METHOD = POST;
        public static final String REQ_URI = "/files";

        private RequestSpecBuilder reqSpec;
        private ResponseSpecBuilder respSpec;

        public UploadJarToS3UsingPOSTOper(RequestSpecBuilder reqSpec) {
            this.reqSpec = reqSpec;
            reqSpec.setContentType("multipart/form-data");
            reqSpec.setAccept("*/*");
            this.respSpec = new ResponseSpecBuilder();
        }

        /**
         * POST /files
         * @param handler handler
         * @param <T> type
         * @return type
         */
        public <T> T execute(Function<Response, T> handler) {
            return handler.apply(RestAssured.given().spec(reqSpec.build()).expect().spec(respSpec.build()).when().request(REQ_METHOD, REQ_URI));
        }

        /**
         * POST /files
         * @param handler handler
         * @return String
         */
        public String executeAs(Function<Response, Response> handler) {
            Type type = new TypeToken<String>(){}.getType();
            return execute(handler).as(type);
        }
        public static final String FILES_PART = "files";

         /**
         * It will assume that the control name is file and the &lt;content-type&gt; is &lt;application/octet-stream&gt;
         * @see #reqSpec for customise
         * @param files (File)  (required)
         * @return operation
         */
         public UploadJarToS3UsingPOSTOper filesMultiPart(File files) {
            reqSpec.addMultiPart(FILES_PART,files);
            return this;
         }

        /**
         * Customise request specification
         * @param consumer consumer
         * @return operation
         */
        public UploadJarToS3UsingPOSTOper reqSpec(Consumer<RequestSpecBuilder> consumer) {
            consumer.accept(reqSpec);
            return this;
        }

        /**
         * Customise response specification
         * @param consumer consumer
         * @return operation
         */
        public UploadJarToS3UsingPOSTOper respSpec(Consumer<ResponseSpecBuilder> consumer) {
            consumer.accept(respSpec);
            return this;
        }
    }
}
